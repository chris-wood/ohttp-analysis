
define(<!HPKE_v1Str!>,<!'HPKE_v1'!>)
dnl Usage: Labeled_Extract(Salt, Label, IKM)
define(<!Labeled_Extract!>, <!Extract($1, <HPKE_v1Str, $2, $3>)!>)

define(<!L!>, <!'32'!>)
dnl Usage: Labeled_Expand(PRK, Label, Info, L)
define(<!Labeled_Expand!>, <!Expand($1, <$4, HPKE_v1Str, $2, $3>, $4)!>)
dnl Usage: ExtractAndExpand(DH, KEM-context)
define(<!EmptyStr!>,<!'blank'!>)
define(<!EAE_PRKStr!>,<!'eae_prk'!>)
define(<!SharedSecretStr!>,<!'shared_secret'!>)
define(<!ExtractAndExpand!>,<!Labeled_Expand(Labeled_Extract(EmptyStr, EAE_PRKStr,$1), SharedSecretStr, <!$2!>, L)!>)



dnl def Encap(pkR, skE)
define(<!SerializePublicKey!>,<!$1!>)
define(<!Encap_SS!>,<!ExtractAndExpand($1^$2, <!<SerializePublicKey('g'^$2), SerializePublicKey($1)>!>)!>)
define(<!Encap_Enc!>,<!SerializePublicKey('g'^$2)!>)

dnl def KeySchedule(mode, shared_secret, info, psk, psk_id)
define(<!PSKIDHashStr!>,<!'psk_id_hash'!>)
define(<!KS_psk_id_hash!>,<!Labeled_Extract(EmptyStr, PSKIDHashStr, $1)!>)
define(<!InfoHashStr!>,<!'info_hash'!>)
define(<!KS_info_hash!>, <!Labeled_Extract(EmptyStr, InfoHashStr, <!$1!>)!>)
define(<!KS_key_schedule_context!>, <!<$1, KS_psk_id_hash($2), KS_info_hash(<!$3!>)>!>)
define(<!SecretStr!>,<!'secret'!>)
define(<!KS_secret!>, <!Labeled_Extract($1, SecretStr, $2)!>)
define(<!KeyStr!>, <!'key'!>)
define(<!Nk!>, <!'32'!>)
define(<!KS_key!>, <!Labeled_Expand(KS_secret($2, $4), KeyStr, <!KS_key_schedule_context($1, $5, <!$3!>)!>, Nk)!>)
define(<!BaseNonceStr!>, <!'base_nonce'!>)
define(<!Nn!>,<!'32'!>)
define(<!KS_base_nonce!>,<!Labeled_Expand(KS_secret($2, $4), BaseNonceStr, <!KS_key_schedule_context($1, $5, <!$3!>)!>, Nn)!>)
define(<!ExpStr!>, <!'exp'!>)
define(<!Nh!>,<!'32'!>)
define(<!KS_exporter_secret!>,<!Labeled_Expand(KS_secret($2, $4), ExpStr, <!KS_key_schedule_context($1, $5, <!$3!>)!>, Nh)!>)
define(<!InitSeqNo!>, <!'0'!>)
define(<!KeyScheduleS!>,<!<KS_key($1, $2, <!$3!>, $4, $5), KS_base_nonce($1, $2, <!$3!>, $4, $5), InitSeqNo, KS_exporter_secret($1, $2, <!$3!>, $4, $5)>!>)
define(<!KeyScheduleS_Key!>,<!KS_key($1, $2, <!$3!>, $4, $5)!>)
define(<!KeyScheduleS_Base_Nonce!>,<!KS_base_nonce($1, $2, <!$3!>, $4, $5)!>)
define(<!KeyScheduleS_Exporter_Secret!>,<!KS_exporter_secret($1, $2, <!$3!>, $4, $5)!>)

dnl def SetupBaseS(pkR, info, skE)
define(<!SetupBaseS_Enc!>,<!Encap_Enc($1, $2)!>)
define(<!ModeBase!>, <!'0x00'!>)
define(<!ModePSK!>, <!'0x01'!>)
define(<!DefaultPSK!>, <!EmptyStr!>)
define(<!DefaultPSKID!>, <!EmptyStr!>)
define(<!SetupBaseS_KSS_Key!>,<!KeyScheduleS_Key(ModeBase, Encap_SS($1, $3), <!$2!>, DefaultPSK, DefaultPSKID)!>)
define(<!SetupBaseS_KSS_Base_Nonce!>,<!KeyScheduleS_Base_Nonce(ModeBase, Encap_SS($1, $3), <!$2!>, DefaultPSK, DefaultPSKID)!>)
define(<!SetupBaseS_KSS_Exporter_Secret!>,<!KeyScheduleS_Exporter_Secret(ModeBase, Encap_SS($1, $3), <!$2!>, DefaultPSK, DefaultPSKID)!>)

dnl def ContextS.Seal(aad, pt, key, base_nonce)
dnl Because we model the single-shot API the seq is guaranteed to be 0, and base_nonce xor 0 = base_nonce. Thus we just return base_nonce.
define(<!ContextComputeNonce!>,<!$1!>)
dnl Because we model the single-shot API we don't need to keep track of the sequence number
define(<!ContextSSeal!>,<!seal($3, ContextComputeNonce($4), $1, $2)!>)

dnl SealBase(pkR, info, aad, pt, skE)
define(<!SealBase!>,<!<SetupBaseS_Enc($1, $5), ContextSSeal($3, $4, SetupBaseS_KSS_Key($1, <!<!$2!>!>, $5), SetupBaseS_KSS_Base_Nonce($1, <!$2!>, $5))>!>)
define(<!SealBase_Enc!>,<!SetupBaseS_Enc($1, $2)!>)
define(<!SealBase_Ct!>,<!ContextSSeal($3, $4, SetupBaseS_KSS_Key($1, <!<!$2!>!>, $5), SetupBaseS_KSS_Base_Nonce($1, <!$2!>, $5))!>)
dnl Decap(enc, skR)
define(<!DeserializePublicKey!>,<!$1!>)
define(<!Decap!>,<!ExtractAndExpand(DeserializePublicKey($1)^$2, <!<$1, SerializePublicKey('g'^$2)>!>)!>)


dnl KeyScheduleR
define(<!KeyScheduleR!>,<!<KS_key($1, $2, $3, $4, $5), KS_base_nonce($1, $2, $3, $4, $5), InitSeqNo, KS_exporter_secret($1, $2, $3, $4, $5)>!>)
define(<!KeyScheduleR_Key!>,<!KS_key($1, $2, $3, $4, $5)!>)
define(<!KeyScheduleR_Base_Nonce!>,<!KS_base_nonce($1, $2, $3, $4, $5)!>)
define(<!KeyScheduleR_Exporter_Secret!>,<!KS_exporter_secret($1, $2, $3, $4, $5)!>)
dnl SetupBaseR(enc, skR, info)
define(<!SetupBaseR!>,<!<!KeyScheduleR(ModeBase, Decap($1, $2), $3, DefaultPSK, DefaultPSKID)!>!>)
define(<!SetupBaseR_Key!>,<!KeyScheduleR_Key(ModeBase, Decap($1, $2), $3, DefaultPSK, DefaultPSKID)!>)
define(<!SetupBaseR_Base_Nonce!>,<!KeyScheduleR_Base_Nonce(ModeBase, Decap($1, $2), $3, DefaultPSK, DefaultPSKID)!>)
define(<!SetupBaseR_Exporter_Secret!>,<!KeyScheduleR_Exporter_Secret(ModeBase, Decap($1, $2), $3, DefaultPSK, DefaultPSKID)!>)

dnl ContextR.Open(aad, ct, key, base_nonce)
define(<!ContextROpen!>,<!open($3, ContextComputeNonce($4), $1, $2)!>)
define(<!SecStr!>,<!'sec'!>)

dnl Context.Export(exporter_context, L, exporter_secret)
define(<!ContextExport!>,<!Labeled_Expand($3, SecStr, $1, $2)!>)
dnl def OpenBase(enc, skR, info, aad, ct)
define(<!OpenBase!>,<ContextROpen($4, $5, SetupBaseR_Key($1, $2, $3), SetupBaseR_Base_Nonce($1, $2, $3)))